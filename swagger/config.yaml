openapi: 3.0.0
servers: []
info:
  description: API
  version: "1.0.0"
  title: DB Service
  contact:
    email: dondiego4697@mail.ru
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
    /api/user/create:
        post:
          summary: create user
          operationId: createUser
          description: Adds user to the system
          responses:
            '201':
              description: item created
            '400':
              description: 'invalid input'
            '409':
              description: database error
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
            description: User item to add
    /api/user/get:
        get:
          summary: get users
          operationId: getUsers
          parameters:
            - in: query
              name: order
              description: sorting order [desc, asd]
              required: false
              schema:
                type: string
            - in: query
              name: skip
              description: number of records to skip for pagination
              schema:
                type: integer
                format: int64
                minimum: 0
            - in: query
              name: limit
              description: maximum number of records to return
              schema:
                type: integer
                format: int64
                minimum: 0
          responses:
            '200':
              description: search results matching user by id
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
            '400':
              description: 'invalid input'
            '409':
              description: database error
    /api/user/get/id/${id}:
        get:
          summary: get user by id
          operationId: getUserById
          parameters:
            - in: path
              name: id
              description: id of user
              required: true
              schema:
                type: integer
                format: int64
          responses:
            '200':
              description: search results matching user by id
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
            '409':
              description: database error
    /api/user/get/login/${login}:
        get:
          summary: get user by login
          operationId: getUserByLogin
          parameters:
            - in: path
              name: login
              description: login of user
              required: true
              schema:
                type: string
          responses:
            '200':
              description: search results matching user by login
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
            '409':
              description: database error
    /api/user/update/${id}:
        post:
          summary: update user
          operationId: updateUser
          description: Update user in the system
          parameters:
            - in: path
              name: id
              description: id of user
              required: true
              schema:
                type: integer
                format: int64
          responses:
            '201':
              description: item updated
            '400':
              description: invalid input
            '409':
              description: database error
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
            description: User date to update
    /api/user/delete/${id}:
        delete:
          summary: delete user
          operationId: deleteUser
          description: Delete user from the system
          parameters:
            - in: path
              name: id
              description: id of user
              required: true
              schema:
                type: integer
                format: int64
          responses:
            '200':
              description: item deleted
            '409':
              description: database error
components:
  schemas:
    User:
      type: object
      required:
        - login
        - name
        - password
        - email
      properties:
        id:
            type: integer
            format: int64
            example: 1091
        login:
          type: string
          example: diego
        name:
          type: string
          example: Widget Adapter
        password:
            type: string
            example: asdskfnjgbhufdsakjnlkma
        email:
            type: string
            example: email@op.com
        country:
            type: string
            format: iso
            example: 'RU'
        selfInfo:
            type: string
            example: a little bit about myself
        isAthlete:
            type: boolean
            example: true
        isBanned:
            type: boolean
            example: false
        weight:
            type: number
            format: float
            example: 79.9
        growth:
            type: number
            format: float
            example: 190.1
        birthDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        registered:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
